<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RobTheFiveNine</title>
  
  
  <link href="https://robthefivenine.github.io/atom.xml" rel="self"/>
  
  <link href="https://robthefivenine.github.io/"/>
  <updated>2022-02-26T15:31:43.721Z</updated>
  <id>https://robthefivenine.github.io/</id>
  
  <author>
    <name>RobTheFiveNine</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Protecting Against NoSQL Injection in Express</title>
    <link href="https://robthefivenine.github.io/2022/02/26/protecting-against-nosql-injection-in-express/"/>
    <id>https://robthefivenine.github.io/2022/02/26/protecting-against-nosql-injection-in-express/</id>
    <published>2022-02-26T00:55:00.000Z</published>
    <updated>2022-02-26T15:31:43.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-a-NoSQL-Injection"><a href="#What-is-a-NoSQL-Injection" class="headerlink" title="What is a NoSQL Injection?"></a>What is a NoSQL Injection?</h2><p>A NoSQL injection is the NoSQL equivalent to the more commonly known SQL injection. If you’re not familiar with either of these terms - it is the process of abusing an input that is not correctly validated before being used for database operations.</p><p>The impact of an injection will vary depending on what the operation does, but some plausible results are:</p><ul><li>Bypassing authentication (i.e. logging in as a user without knowing their passphrase)</li><li>Executing code on the server (potentially leading to a full compromise of the server)</li><li>Modifying data that the user should not have write access to</li></ul><h3 id="How-Injections-Come-to-Exist"><a href="#How-Injections-Come-to-Exist" class="headerlink" title="How Injections Come to Exist"></a>How Injections Come to Exist</h3><p>A common design pattern amongst Express applications that utilise libraries like Mongoose or the native MongoDB library is to use the body parser middleware to automatically deserialise JSON bodies into objects that are stored in <code>req.body</code> and subsequently pass this (or a child prop) as the query filter.</p><p>The problem with this, is that it is possible for a malicious user to specify something other than a valid value, and instead add JSON that will be deserialised into a <a href="https://docs.mongodb.com/manual/reference/operator/query/">Query &#x2F; Projection Operator</a>.</p><p>A basic theoretical example of this would be, if the <code>username</code> and <code>pass</code> props of <code>req.body</code> were used as the filter for a request that processes a login attempt, like so:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./UserModel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span>  <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">username</span><span class="token operator">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username<span class="token punctuation">,</span>    <span class="token literal-property property">pass</span><span class="token operator">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>pass<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Logged in!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Incorrect credentials'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In this example, a typical request body that would be expected would be something such as :</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"robocop"</span><span class="token punctuation">,</span>  <span class="token property">"pass"</span><span class="token operator">:</span> <span class="token string">"ocp1"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>If, however, a user was to submit the following request, they could login as <code>robocop</code> without knowing the password:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"robocop"</span><span class="token punctuation">,</span>  <span class="token property">"pass"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"$ne"</span><span class="token operator">:</span> <span class="token string">""</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>By submitting an object with the <code>$ne</code> operator, it changes the query to be the SQL equivalent of:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'robocop'</span> <span class="token operator">AND</span> pass <span class="token operator">&lt;></span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>As long as a value exists in the <code>pass</code> field, which it should, the attacker would successfully authenticate as <code>robocop</code>; not good.</p><h2 id="Protecting-an-Application"><a href="#Protecting-an-Application" class="headerlink" title="Protecting an Application"></a>Protecting an Application</h2><p>As already mentioned, a NoSQL injection vulnerability is caused by a lack of validation of user input. Libraries like Mongoose, which define strictly typed models, provide some protection by means of type validation.</p><p>Despite strongly typed models in libraries like Mongoose, they frequently do not do any type checking against queries (like the one constructed in the previous section). As a result, this leaves us with two options:</p><ol><li>Validate that props specified by the user match the expected type</li><li>Check if a prop is an object that contains a reserved operator name (such as <code>$ne</code>)</li></ol><p>Today, I released a library that I have been working on to help provide a catch-all means of protecting against NoSQL injection attacks. The library can be found on <a href="https://github.com/RobTheFiveNine/express-nosql-sanitizer">GitHub</a> and <a href="https://www.npmjs.com/package/express-nosql-sanitizer">NPM</a>.</p><p>The library provides two operating modes; one which will remove any dangerous looking props (i.e. any prop that starts with <code>$</code>) and another which will remove specifically any props that use the operators listed in the <a href="https://docs.mongodb.com/manual/reference/operator/query/">MongoDB Documentation</a> as of 26th February 2022.</p><p>To use the middleware library, first start by adding it to your project:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> express-nosql-sanitizer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>After adding <code>express-nosql-sanitizer</code> as a dependency, it can be added to your Express stack by requiring the library and passing the middleware to <code>use</code>; like so:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./UserModel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> nosqlSanitizer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-nosql-sanitizer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">nosqlSanitizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span>  <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">username</span><span class="token operator">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username<span class="token punctuation">,</span>    <span class="token literal-property property">pass</span><span class="token operator">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>pass<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Logged in!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Incorrect credentials'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>By modifying the example with the above changes, the previous attack which would result in the following query being constructed:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"robocop"</span><span class="token punctuation">,</span>  <span class="token property">"pass"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"$ne"</span><span class="token operator">:</span> <span class="token string">""</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Would now, instead, create this query criteria:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"robocop"</span><span class="token punctuation">,</span>  <span class="token property">"pass"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>As a result, protecting the application from having dangerous operators make their way into the query. For advanced usage of the library, check the <a href="https://github.com/RobTheFiveNine/express-nosql-sanitizer">GitHub Page</a></p><p>Additionally, if the user input was being passed via <code>req.query</code>, the props would be cleansed too. It should be noted, however, <code>req.params</code> is <em>not</em> cleansed - the reason being, it should not be possible to deserialise objects from <code>req.params</code> without manually writing the code to do so.</p><h2 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h2><p>The take away points here are:</p><ul><li>Validate user input as much as possible</li><li>Implement a fallback &#x2F; catch all, like <a href="https://github.com/RobTheFiveNine/express-nosql-sanitizer">express-nosql-sanitizer</a> to deal with cases that slip through the net</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;What-is-a-NoSQL-Injection&quot;&gt;&lt;a href=&quot;#What-is-a-NoSQL-Injection&quot; class=&quot;headerlink&quot; title=&quot;What is a NoSQL Injection?&quot;&gt;&lt;/a&gt;What is a </summary>
      
    
    
    
    
    <category term="programming" scheme="https://robthefivenine.github.io/tags/programming/"/>
    
    <category term="security" scheme="https://robthefivenine.github.io/tags/security/"/>
    
    <category term="web" scheme="https://robthefivenine.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Cleaning Up GamePass Games That Will Not Uninstall</title>
    <link href="https://robthefivenine.github.io/2021/12/16/cleaning-up-gamepass-games-that-will-not-uninstall/"/>
    <id>https://robthefivenine.github.io/2021/12/16/cleaning-up-gamepass-games-that-will-not-uninstall/</id>
    <published>2021-12-16T00:00:00.000Z</published>
    <updated>2022-02-20T00:01:44.138Z</updated>
    
    <content type="html"><![CDATA[<p>I have recently had a lot of trouble with the Dead by Daylight support team ignoring requests for support regarding a purchase I made that they didn’t fullfil. As they will not so much as respond to my support requests, I decided it was time to just uninstall the game, accept that they won’t fullfil my order or refund the money and move on.</p><p>After uninstalling the game, however, I notice that not a single MB of disk space had freed up… which was strange, as Dead by Daylight is quite a large game. I then try removing another game I am no longer playing and sure enough - no disk space is freed up.</p><p>I began to look online to find that this is not an uncommon issue; it is being reported <a href="https://answers.microsoft.com/en-us/xbox/forum/all/xbox-game-pass-for-pc-not-freeing-up-space-after/e7094bf2-b060-4803-b191-91b4466f026b">Time</a> and <a href="https://answers.microsoft.com/en-us/windows/forum/all/solved-disk-space-not-freed-after-uninstalling-a/48911f57-667f-4518-875c-19f543bdf895">Time</a> and <a href="https://answers.microsoft.com/en-us/xbox/forum/all/recover-disk-space-after-uninstalling-games-from/54c5eb35-0728-4fea-990a-17a010081511">Time</a> again (I could keep adding more links, but you get the picture).</p><hr><p><strong>Note:</strong> Before following the steps below, you should ensure you have used the uninstall function in Game Pass to uninstall these games (even if they do still take up disk space). This way, once we have removed the files, there will be no confusion in the Game Pass app as to whether they are installed or not.</p><hr><p>The initial hurdle I had, was that Windows 10 does not want you to go anywhere near the <code>WindowsApps</code> directory that games are installed in. Even if you’re an administrator, you can not gain access to this directory without changing the ownership of the directory and all child objects.</p><hr><p><strong>Important Note:</strong> there are some potential security issues in doing this, as mentioned in <a href="https://www.reddit.com/r/XboxGamePass/comments/ri0nfd/comment/houqojy/?utm_source=reddit&utm_medium=web2x&context=3">This Comment</a>. If you can, try to ensure you revert the ownership of any directories back to what they were, and consider changing them one by one, rather than doing it recursively to ensure you are able to note and revert the ownership and to affect no more than what is necessary.</p><hr><p>Rather than explain that process here, I will instead point you in the direction of point 1 of <a href="https://superuser.com/a/1465362">This SuperUser Answer</a> as it is well written up and contains screenshots.</p><p>After gaining access to this directory, I could see I had an old Forza Horizon 4 directory left over taking up around 30GB of space, which I subsequently deleted. However, there were no directories for either Dead by Daylight, or Tropico 6 (another game I tested uninstalling)…</p><p>To verify both games data was still on disk, I tried to reinstall them via the Game Pass app and as expected, there was no download time, the installation went from 0% to 100% in less than a second - so the data was definitely still there, despite there not being any directories for them.</p><p>After running <a href="https://windirstat.net/">WinDirStat</a>, I noticed that the <code>MSIXVC</code> directory found underneath the <code>WindowsApps</code> directory was notably large. It was filled with files that used ambiguous GUIDs as names but the file sizes seemed to match up with the games from Game Pass.</p><p>After a bit more research into this directory, I got confirmation that these are in fact the games that are stored as images that are mounted at runtime (presumably some kind of anti-piracy mechanic).</p><p>There was another hurdle now, however - how do I know for sure which file is which? I had several games that were in a similar region in terms of size, so I didn’t want to remove the wrong set of files.</p><hr><p><strong>Update 2021-12-17:</strong> A user on reddit posted <a href="https://www.reddit.com/r/XboxGamePass/comments/ri0nfd/comment/hoxhg3g/?utm_source=reddit&utm_medium=web2x&context=3">This Comment</a> informing me that the process described below can be done <em>much</em> easier within Windows itself. </p><p>If you open regedit and navigate to <code>Computer\HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Store\ContentId</code> you will be able to see a full list of GUIDs and associated application &#x2F; game IDs. This should eliminate any need to use Linux.</p><p>I will leave the original instructions below, in case they are of any use to anyone; but using regedit as mentioned on reddit will definitely be the easier option, so try that first to determine which files you need to remove!</p><hr><p><strong>IMPORTANT NOTE:</strong> The next part of this involves using Linux, if you don’t have a Linux installation or live CD, you may be able to achieve the same thing by installing the <a href="https://docs.microsoft.com/en-us/windows/wsl/install">Windows Subsystem for Linux</a>. I can’t guarantee WSL has the required tools, but I’d assume it does as they are standard tools found in almost every Linux distribution available.</p><p>If your <code>WindowsApps</code> directory appears on the same drive that Windows is installed on, mounting the drive in Linux and making changes could cause problems (particularly if using fast boot) - if you’re not 100% comfortable with Linux, do this at your own risk, or instead look at using WSL as mentioned above.</p><hr><p>At this point, I booted into my Linux partition and navigated to the <code>WindowsApps/MSIXVC</code> directory. Thankfully, as Linux doesn’t care about the permissions set by Windows, there was no need to change anything around to access the files.</p><p>After seeing what data I could pull out of the GUID files in the <code>MSIXVC</code> directory, I found that the application manifests are embedded in the images. This means that it’s possible to extract the name of the game stored in the image (in most cases).</p><p>To do this, open a terminal and navigate to <code>WindowsApps/MSIXVC</code>. For reference, this is what my MSIXVC directory looked like when running <code>ls -lah</code>:</p><pre class="line-numbers language-shell_session" data-language="shell_session"><code class="language-shell_session">$ ls -lahtotal 152Gdrwxrwxrwx 1 rob rob  568 Dec 16 00:29 .drwxrwxrwx 1 rob rob  12K Dec 16 00:19 ..-rwxrwxrwx 1 rob rob 9.2G Oct  9 19:56 49EDD11E-DA62-40F7-80D3-2B565FFB447A-rwxrwxrwx 1 rob rob 5.1K Oct  9 19:56 49EDD11E-DA62-40F7-80D3-2B565FFB447A.311ED44B-274D-4FCD-AECF-13216CB4B0ED.xsp-rwxrwxrwx 1 rob rob 4.0K Dec 16 00:23 49EDD11E-DA62-40F7-80D3-2B565FFB447A.xct-rwxrwxrwx 1 rob rob 4.0K Dec 16 00:23 49EDD11E-DA62-40F7-80D3-2B565FFB447A.xvi-rwxrwxrwx 1 rob rob  13K Oct  9 19:57 49EDD11E-DA62-40F7-80D3-2B565FFB447A.xvs-rwxrwxrwx 1 rob rob  48G Dec 15 22:27 513710F5-AB8E-4D7C-9ED5-D0BA94DCFB33-rwxrwxrwx 1 rob rob  46K Dec 15 22:27 513710F5-AB8E-4D7C-9ED5-D0BA94DCFB33.F89FFB89-EB18-4168-83E4-54DAA10D4B94.xsp-rwxrwxrwx 1 rob rob 4.0K Dec 16 00:23 513710F5-AB8E-4D7C-9ED5-D0BA94DCFB33.xct-rwxrwxrwx 1 rob rob  20K Dec 16 00:23 513710F5-AB8E-4D7C-9ED5-D0BA94DCFB33.xvi-rwxrwxrwx 1 rob rob  25K Dec 15 22:28 513710F5-AB8E-4D7C-9ED5-D0BA94DCFB33.xvs-rwxrwxrwx 1 rob rob  57G Sep  3 17:10 6269913D-D364-42F2-8F88-0434CA75D5F0-rwxrwxrwx 1 rob rob 4.0K Dec 16 00:23 6269913D-D364-42F2-8F88-0434CA75D5F0.xct-rwxrwxrwx 1 rob rob 4.0K Dec 16 00:23 6269913D-D364-42F2-8F88-0434CA75D5F0.xvi-rwxrwxrwx 1 rob rob 8.9K Sep  3 17:55 6269913D-D364-42F2-8F88-0434CA75D5F0.xvs-rwxrwxrwx 1 rob rob  36G Dec  9 20:30 8D9B5BB7-6442-4DFE-97D9-641BFB57C835-rwxrwxrwx 1 rob rob 8.6K Dec  9 20:30 8D9B5BB7-6442-4DFE-97D9-641BFB57C835.D80FFEB9-3B8F-4D26-9D46-2FC72692730A.xsp-rwxrwxrwx 1 rob rob 4.0K Dec 16 00:23 8D9B5BB7-6442-4DFE-97D9-641BFB57C835.xct-rwxrwxrwx 1 rob rob 8.0K Dec 16 00:23 8D9B5BB7-6442-4DFE-97D9-641BFB57C835.xvi-rwxrwxrwx 1 rob rob  18K Dec  9 20:33 8D9B5BB7-6442-4DFE-97D9-641BFB57C835.xvs-rwxrwxrwx 1 rob rob 3.5G Feb 10  2021 A2239F3B-CBDD-4921-875E-C8E364379A3F-rwxrwxrwx 1 rob rob 4.0K Dec 16 00:23 A2239F3B-CBDD-4921-875E-C8E364379A3F.xct-rwxrwxrwx 1 rob rob 4.0K Dec 16 00:23 A2239F3B-CBDD-4921-875E-C8E364379A3F.xvi-rwxrwxrwx 1 rob rob 3.4K Feb 10  2021 A2239F3B-CBDD-4921-875E-C8E364379A3F.xvs-rwxrwxrwx 1 rob rob 457M Dec 15 22:29 C2A26CC6-5D55-4BA4-8340-AB7C89059118-rwxrwxrwx 1 rob rob 4.9K Dec 15 22:29 C2A26CC6-5D55-4BA4-8340-AB7C89059118.69765BAB-534B-4BC6-8607-946D7C20FB41.xsp-rwxrwxrwx 1 rob rob 4.0K Dec 16 00:23 C2A26CC6-5D55-4BA4-8340-AB7C89059118.xct-rwxrwxrwx 1 rob rob 4.0K Dec 16 00:23 C2A26CC6-5D55-4BA4-8340-AB7C89059118.xvi-rwxrwxrwx 1 rob rob  15K Dec 15 22:29 C2A26CC6-5D55-4BA4-8340-AB7C89059118.xvs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>From the above examples, if we take <code>49EDD11E-DA62-40F7-80D3-2B565FFB447A</code> and grep the strings that can be extracted from the file by running: <code>strings 49EDD11E-DA62-40F7-80D3-2B565FFB447A | grep -i &quot;Identity Name&quot;</code>, we can see it is the copy of Two Point Hospital that I have installed:</p><pre class="line-numbers language-shell_session" data-language="shell_session"><code class="language-shell_session">$ strings 49EDD11E-DA62-40F7-80D3-2B565FFB447A | grep -i &quot;Identity Name&quot;  &lt;Identity Name&#x3D;&quot;7904SEGAEuropeLtd.TwoPointHospital-GamePass&quot; Publisher&#x3D;&quot;CN&#x3D;E92AA59E-951A-41AD-AAF4-626B69AEDBB6&quot; Version&#x3D;&quot;1.27.11.0&quot; ProcessorArchitecture&#x3D;&quot;x64&quot; &#x2F;&gt;  &lt;Identity Name&#x3D;&quot;7904SEGAEuropeLtd.TwoPointHospital-GamePass&quot; Publisher&#x3D;&quot;CN&#x3D;E92AA59E-951A-41AD-AAF4-626B69AEDBB6&quot; Version&#x3D;&quot;1.27.11.0&quot; &#x2F;&gt;  &lt;Identity Name&#x3D;&quot;7904SEGAEuropeLtd.TwoPointHospital-GamePass&quot; Publisher&#x3D;&quot;CN&#x3D;E92AA59E-951A-41AD-AAF4-626B69AEDBB6&quot; Version&#x3D;&quot;1.27.11.0&quot; &#x2F;&gt;  &lt;Identity Name&#x3D;&quot;7904SEGAEuropeLtd.TwoPointHospital-GamePass&quot; Publisher&#x3D;&quot;CN&#x3D;E92AA59E-951A-41AD-AAF4-626B69AEDBB6&quot; Version&#x3D;&quot;1.27.11.0&quot; ProcessorArchitecture&#x3D;&quot;x64&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If the identity name isn’t clear, we can also try looking for the display name in the manifest:</p><pre class="line-numbers language-shell_session" data-language="shell_session"><code class="language-shell_session">$ strings 49EDD11E-DA62-40F7-80D3-2B565FFB447A | grep -i &quot;DisplayName&quot;     &lt;DisplayName&gt;Two Point Hospital&lt;&#x2F;DisplayName&gt;    &lt;PublisherDisplayName&gt;SEGA Europe Ltd&lt;&#x2F;PublisherDisplayName&gt;      &lt;uap:VisualElements DisplayName&#x3D;&quot;Two Point Hospital    &lt;Executable Name&#x3D;&quot;TPH.exe&quot; Id&#x3D;&quot;Game&quot; OverrideDisplayName&#x3D;&quot;Two Point Hospital  &lt;ShellVisuals DefaultDisplayName&#x3D;&quot;Two Point Hospital&quot; PublisherDisplayName&#x3D;&quot;SEGA Europe Ltd&quot; Square150x150Logo&#x3D;&quot;GraphicsLogo.png&quot; Square44x44Logo&#x3D;&quot;SmallLogo.png&quot; Description&#x3D;&quot;Two Point Hospital    &lt;Executable Name&#x3D;&quot;TPH.exe&quot; Id&#x3D;&quot;Game&quot; OverrideDisplayName&#x3D;&quot;Two Point Hospital  &lt;ShellVisuals DefaultDisplayName&#x3D;&quot;Two Point Hospital&quot; PublisherDisplayName&#x3D;&quot;SEGA Europe Ltd&quot; Square150x150Logo&#x3D;&quot;GraphicsLogo.png&quot; Square44x44Logo&#x3D;&quot;SmallLogo.png&quot; Description&#x3D;&quot;Two Point Hospital    &lt;DisplayName&gt;Two Point Hospital&lt;&#x2F;DisplayName&gt;    &lt;PublisherDisplayName&gt;SEGA Europe Ltd&lt;&#x2F;PublisherDisplayName&gt;      &lt;uap:VisualElements DisplayName&#x3D;&quot;Two Point Hospital<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>After you have identified that a GUID file <em>is</em> the one you want to remove, you can remove it and the extra associated files with it by running <code>rm GUID*</code>; for example, to remove Two Point Hospital, I would run: <code>rm 49EDD11E-DA62-40F7-80D3-2B565FFB447A*</code></p><p>Repeat this as many times as needed to remove games you have uninstalled, and when you reboot back into Windows (or continue using Windows if you used WSL…), you should see the disk space is recovered and that there are no traces left of the games.</p><p>Again, manually deleting files like this can cause problems if you end up deleting the wrong thing - so be very careful and only do it if you’re confident in what you’re doing.</p><p><strong>One final note regarding the use of Linux</strong> - there is no reason the step that uses Linux (to identify which GUID file is which game) cannot be done in Windows. I simply did not know of Windows alternatives to the <code>strings</code> and <code>grep</code> commands, which is why I switched to my Linux installation to do this. This is why I suggest that WSL should aid in this situation, because it should have those tools - there isn’t any crazy magic that Linux does, it’s just a way to search big files.</p>]]></content>
    
    
      
      
    <summary type="html">
&lt;p&gt;I have recently had a lot of trouble with the Dead by Daylight support team ignoring requests for support regarding a purchase I made th</summary>
      
    
    
    
    
    <category term="gaming" scheme="https://robthefivenine.github.io/tags/gaming/"/>
    
    <category term="troubleshooting" scheme="https://robthefivenine.github.io/tags/troubleshooting/"/>
    
  </entry>
  
  <entry>
    <title>Fix Missing Tray Icon in Signal Desktop for Linux</title>
    <link href="https://robthefivenine.github.io/2021/09/18/fix-missing-tray-icon-in-signal-desktop-for-linux/"/>
    <id>https://robthefivenine.github.io/2021/09/18/fix-missing-tray-icon-in-signal-desktop-for-linux/</id>
    <published>2021-09-17T23:00:00.000Z</published>
    <updated>2022-02-20T00:10:20.450Z</updated>
    
    <content type="html"><![CDATA[<p>As of September, 2021, the Signal desktop application does not currently expose a setting in the GUI to minimise the application to the system tray. However, this functionality is available via the CLI arguments as can be seen documented in <a href="https://github.com/signalapp/Signal-Desktop/issues/1965">This Thread</a> and <a href="https://github.com/signalapp/Signal-Desktop/issues/2210">This One</a>.</p><p>It does seem to have been added in the beta build as per <a href="https://github.com/signalapp/Signal-Desktop/issues/2210#issuecomment-872330273">This Post</a>:</p><blockquote><p>We’ve added “official” system tray support to the latest beta! Please give it a try and report bugs here on GitHub or <a href="https://community.signalusers.org/t/beta-feedback-for-the-upcoming-desktop-5-8-release/34577">on the community forum</a>.</p><p>If you’re not already on the beta, you can install it side-by-side with the production version. <a href="https://support.signal.org/hc/articles/360007318471-Signal-Beta">Click here for instructions on how to get started with the beta.</a></p><p>Some details about this feature:</p><ul><li>It is available for Windows and Linux. Go to Signal’s settings to enable “minimize to system tray” or “start minimized to tray”.</li><li>These settings are off by default. We may enable them by default in the future, but have no immediate plans to do so.</li><li>If everything goes smoothly in beta (i.e., no significant bugs), we’ll release it to production Windows users in our next production version.</li><li>Because <a href="https://www.electronjs.org/docs/api/tray#class-tray">Linux system tray support is quirkier</a>, it will stay in beta for a little while before we make it available to all users—we want to make sure it works well for most people. I don’t have an ETA for when production Linux users will get system tray support.</li><li>The <code>--use-tray-icon</code> and <code>--start-in-tray</code> command line arguments will continue to work on all 3 platforms. These CLI flags take precedence over settings you choose in the UI. It’s possible we’ll remove these command line arguments in the future, but we have no plans to do so, as it doesn’t significantly increase our maintenance burden.</li></ul><p>For posterity, we added system tray support in <a href="https://github.com/signalapp/Signal-Desktop/commit/af1f2ea44927d92327acda3f20503e7715d4dd89">af1f2ea</a> and <a href="https://github.com/signalapp/Signal-Desktop/commit/8b30fc17cded16cc7d98f6ebcdd8e5a340d580a5">8b30fc1</a>.</p></blockquote><p>In the meantime, if you don’t want to upgrade to using the beta build, you can add the required CLI arguments by updating the <code>Exec</code> property in <code>/usr/share/applications/signal-desktop.desktop</code> to include <code>--use-tray-icon</code>.</p><p>One caveat when doing this, is that updates to Signal appear to revert this change. One way of working around this (albeit a slightly hacky way), is to make use of the <code>cron.hourly</code> tasks.</p><p>Create a file in <code>/etc/cron.hourly</code> named <code>fix-signal-taskbar</code> with the following content:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token function">sed</span> -i <span class="token string">'s/signal-desktop --no-sandbox %U/signal-desktop --use-tray-icon --no-sandbox %U/g'</span> /usr/share/applications/signal-desktop.desktop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Then, run <code>chmod +x /etc/cron.hourly/fix-signal-taskbar</code> to ensure it is executable.</p><p>You can then verify that the script will be executed by using <code>run-parts</code>. Running the command <code>run-parts --test /etc/cron.hourly</code> should list all the scripts that will be executed hourly; included in that should be <code>/etc/cron.hourly/fix-signal-taskbar</code>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;As of September, 2021, the Signal desktop application does not currently expose a setting in the GUI to minimise the application to the s</summary>
      
    
    
    
    
    <category term="troubleshooting" scheme="https://robthefivenine.github.io/tags/troubleshooting/"/>
    
  </entry>
  
  <entry>
    <title>Visualising RayCasts in Godot</title>
    <link href="https://robthefivenine.github.io/2020/08/09/visualising-raycasts-in-godot/"/>
    <id>https://robthefivenine.github.io/2020/08/09/visualising-raycasts-in-godot/</id>
    <published>2020-08-08T23:00:00.000Z</published>
    <updated>2022-02-20T00:19:41.401Z</updated>
    
    <content type="html"><![CDATA[<p>I began creating a new game this week and today needed to create an on screen visualisation of where the user is aiming. To do this, I wanted to be able to draw a line that would start at the origin of a <code>RayCast</code> and end where it collides with another body (to stop a line being indefinitely drawn through the level’s geometry).</p><p>I could find several examples of how to do this in 2D space, but as I am building a 3D game, the methods shown would not work. Eventually, I came across the <a href="https://docs.godotengine.org/en/stable/classes/class_immediategeometry.html#class-immediategeometry">ImmediateGeometry</a> class, which allowed me to achieve exactly what I wanted to.</p><p>An example of how the final product looks can be found below. The line extruding from the rotating arrow is a visual representation of the <code>RayCast</code> and ends at each object that it collides with.</p><video width="100%" muted autoplay playsinline loop>  <source src="/2020/08/09/visualising-raycasts-in-godot/raycast-line.mp4" type="video/mp4" />  Your browser does not support the video tag.</video><p>The node tree for this example looks like this:</p><img src="/2020/08/09/visualising-raycasts-in-godot/node-tree.png" class=""><p>There’s not much special going on here, but for completeness sake, the purpose of each node is as follows:</p><ul><li>The <code>Arrow</code> node is a <code>Spatial</code> which contains the arrow mesh and also contains the <code>RayCast</code> that will be visualised.</li><li>The <code>ImmediateGeometry</code> node is what will be used to “draw” the visualisation</li><li>The <code>Shapes</code> spatial contains the various meshes that are setup with collision enabled that are placed around the scene</li></ul><p>The script attached to the root node is:</p><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript"><span class="token keyword">extends</span> <span class="token class-name">Spatial</span><span class="token keyword">onready</span> <span class="token keyword">var</span> arrow <span class="token operator">=</span> <span class="token variable">$Arrow</span><span class="token keyword">onready</span> <span class="token keyword">var</span> raycast <span class="token operator">=</span> <span class="token variable">$Arrow</span><span class="token operator">/</span>RayCast<span class="token keyword">onready</span> <span class="token keyword">var</span> line <span class="token operator">=</span> <span class="token variable">$ImmediateGeometry</span><span class="token keyword">func</span> <span class="token function">_process</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token punctuation">:</span>    arrow<span class="token punctuation">.</span><span class="token function">rotate_y</span><span class="token punctuation">(</span>delta <span class="token operator">*</span> <span class="token number">1.5</span><span class="token punctuation">)</span>    line<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> raycast<span class="token punctuation">.</span><span class="token function">is_colliding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        line<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>Mesh<span class="token punctuation">.</span><span class="token constant">PRIMITIVE_LINE_STRIP</span><span class="token punctuation">)</span>        line<span class="token punctuation">.</span><span class="token function">add_vertex</span><span class="token punctuation">(</span><span class="token function">to_local</span><span class="token punctuation">(</span>raycast<span class="token punctuation">.</span>global_transform<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span>        line<span class="token punctuation">.</span><span class="token function">add_vertex</span><span class="token punctuation">(</span><span class="token function">to_local</span><span class="token punctuation">(</span>raycast<span class="token punctuation">.</span><span class="token function">get_collision_point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        line<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>First, <a href="https://docs.godotengine.org/en/stable/classes/class_immediategeometry.html#class-immediategeometry-method-clear">ImmediateGeometry-&gt;clear</a> is called, which will remove everything that was previously drawn.</p><p>Next, if <code>RayCast</code> has collided with another body, <a href="https://docs.godotengine.org/en/stable/classes/class_immediategeometry.html#class-immediategeometry-method-begin">ImmediateGeometry-&gt;begin</a> is called with the <code>PRIMITIVE_LINE_STRIP</code> constant, which will ensure that the specified vertexes will be rendered as a line strip (see <a href="https://docs.godotengine.org/en/stable/classes/class_mesh.html#enum-mesh-primitivetype">Mesh::PrimitiveType</a> for more options).</p><p>Now that the <code>ImmediateGeometry</code> node is ready to begin creating the mesh, two calls are made to <a href="https://docs.godotengine.org/en/stable/classes/class_immediategeometry.html#class-immediategeometry-method-add-vertex">ImmediateGeometry-&gt;add_vertex</a>, the first being the starting point (i.e. the origin of <code>RayCast</code>) and the second being the point where <code>RayCast</code> detected a collision.</p><p>An important thing to note about plotting the positions, is that they need to be in local space. All classes that extend <code>Spatial</code> have a <code>to_local</code> method available to them, which will take a global coordinate and translate it to a local one. For this reason, rather than accessing <code>raycast.transform.origin</code>, I use the global transform instead. Likewise, the <code>Vector3</code> returned from <code>raycast.get_collision_point</code> is in the global coordinate system, and needs to be converted to local.</p><p>Finally, calling <a href="https://docs.godotengine.org/en/stable/classes/class_immediategeometry.html#class-immediategeometry-method-end">ImmediateGeometry-&gt;clear</a> will finish the rendering and draw the line on the screen.</p><p>You can grab a copy of the sample project at <a href="https://github.com/RobTheFiveNine/godot-raytrace-visualisation-example">RobTheFiveNine&#x2F;godot-raytrace-visualisation-example</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I began creating a new game this week and today needed to create an on screen visualisation of where the user is aiming. To do this, I wa</summary>
      
    
    
    
    
    <category term="game-dev" scheme="https://robthefivenine.github.io/tags/game-dev/"/>
    
    <category term="godot" scheme="https://robthefivenine.github.io/tags/godot/"/>
    
    <category term="programming" scheme="https://robthefivenine.github.io/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>Creating an Eye Blinking Effect in Godot</title>
    <link href="https://robthefivenine.github.io/2020/06/27/creating-eye-blinking-effect-in-godot/"/>
    <id>https://robthefivenine.github.io/2020/06/27/creating-eye-blinking-effect-in-godot/</id>
    <published>2020-06-26T23:00:00.000Z</published>
    <updated>2022-02-20T00:19:27.277Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been prototyping a new game as a means of testing a few things out in Godot and wanted to add a blinking animation to a cat I had drawn. As the sprite is really simple and flat looking, my initial idea was to have some kind of circular shape that just filled with a colour to give the illusion of eye lids covering the top of the eyes (as can be seen below in the final result):</p><video width="100%" muted autoplay playsinline loop>  <source src="/2020/06/27/creating-eye-blinking-effect-in-godot/blink.mp4" type="video/mp4" />  Your browser does not support the video tag.</video><p>The problems I faced with this were:</p><ul><li>There didn’t seem to be an easy way to draw a well rounded ellipse (like when creating collission shapes)</li><li>I couldn’t create a “stretchable” sprite due to the shape of the eyes</li></ul><p>My solution was to create a new sprite for each eye and then animate the <code>Region</code> properties. One of the sprites can be found below, if you want to follow along:</p><img src="/2020/06/27/creating-eye-blinking-effect-in-godot/LeftEyeLid.png" class=""><p>If you create a new <code>Sprite</code> node in Godot and head over to the inspector tab, you will see there is a <code>Region</code> group. The settings within this group will allow you to change the region of a sprite that is drawn to screen.</p><p>For example, if after enabling the <code>Region</code> properties we set the <code>region_rect</code> height property to <code>40</code> (roughly half of the height of the sprite), we can see that Godot now only renders the top half of the sprite:</p><img src="/2020/06/27/creating-eye-blinking-effect-in-godot/region_example.png" class=""><p>After finding this, it was clear this would help me achieve exactly what I wanted. However, animating just the height property alone was not enough, as everytime the height property is changed, the sprite will move to ensure it is still centered like this:</p><video width="100%" muted autoplay playsinline loop>  <source src="/2020/06/27/creating-eye-blinking-effect-in-godot/center_problem.mp4" type="video/mp4" />  Your browser does not support the video tag.</video><p>My initial solution to the centering issue was to animate the <code>Offset</code> property in the opposing direction, however, whilst writing this post, I realised that there is a much simpler solution - within the <code>Offset</code> properties, there is a <code>Centered</code> property. Disable this, and the anchor point of the sprite will be the top left corner.</p><p>Now, when we animate the <code>region_rect.h</code> property, the top of the sprite will remain in a fixed position, whilst the bottom side of the region will change:</p><video width="100%" muted autoplay playsinline loop>  <source src="/2020/06/27/creating-eye-blinking-effect-in-godot/uncentered.mp4" type="video/mp4" />  Your browser does not support the video tag.</video><p>With the sprite properly configured, creating the animation was as simple as adding a track in an <code>AnimationPlayer</code> for the <code>region_rect</code> property, ensuring the height value starts at <code>0</code>, at the mid point is at full height (I altered this to <code>60</code> as I changed the <code>y</code> offset slightly), and then ends on the last key frame at <code>0</code> again:</p><video width="100%" muted autoplay playsinline loop>  <source src="/2020/06/27/creating-eye-blinking-effect-in-godot/working-eyelid.mp4" type="video/mp4" />  Your browser does not support the video tag.</video><p>After repeating this process for both eye lids, and positioning appropriately in front of the cat sprite, the eyes now blink!</p><video width="100%" muted autoplay playsinline loop>  <source src="/2020/06/27/creating-eye-blinking-effect-in-godot/blink.mp4" type="video/mp4" />  Your browser does not support the video tag.</video>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I’ve been prototyping a new game as a means of testing a few things out in Godot and wanted to add a blinking animation to a cat I had dr</summary>
      
    
    
    
    
    <category term="animation" scheme="https://robthefivenine.github.io/tags/animation/"/>
    
    <category term="game-dev" scheme="https://robthefivenine.github.io/tags/game-dev/"/>
    
    <category term="godot" scheme="https://robthefivenine.github.io/tags/godot/"/>
    
  </entry>
  
</feed>
